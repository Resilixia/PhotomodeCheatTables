<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <CheatEntries>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Hotsampling"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"write render res 2"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// By Otis_Inf and Hattiwatti
// Updated by ghostinthecamera
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(writerenderres,coregame_rmdwin10_f.dll,89 84 24 x x x x E8 x x x x 48 8B 9C 24 x x x x) // should be unique
registersymbol(writerenderres)
alloc(newmem,$1000,"coregame_rmdwin10_f.dll"+AC54C)
//
alloc(hookreturn,7)
registersymbol(hookreturn)
//
label(code)
label(return)

newmem:

code:
  // hard-write the resolution back instead of the original code which writes the results of calculations to the addresses
  // in the stackframe. Do this at width+8 and height+8, so
  mov [rsp+00000084],eax   // screen height. (screenwidth is at 80)
  cvttss2si eax, [rdi+04]
  mov [rsp+88], eax        // rendering width,
  cvttss2si eax, [rdi+08]
  mov [rsp+8C], eax        // rendering height
  jmp return

hookreturn:
readmem(writerenderres,7)

writerenderres:
  jmp newmem
  nop 2
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
writerenderres:
readmem(hookreturn,7)

unregistersymbol(hookreturn)
unregistersymbol(writerenderres)
dealloc(hookreturn)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "coregame_rmdwin10_f.dll"+AC54C

"coregame_rmdwin10_f.dll"+AC50A: 0F 29 4C 24 50              -  movaps [rsp+50],xmm1
"coregame_rmdwin10_f.dll"+AC50F: 0F 10 8B D0 00 00 00        -  movups xmm1,[rbx+000000D0]
"coregame_rmdwin10_f.dll"+AC516: 0F 29 44 24 60              -  movaps [rsp+60],xmm0
"coregame_rmdwin10_f.dll"+AC51B: 0F 10 83 E0 00 00 00        -  movups xmm0,[rbx+000000E0]
"coregame_rmdwin10_f.dll"+AC522: 0F 29 4C 24 70              -  movaps [rsp+70],xmm1
"coregame_rmdwin10_f.dll"+AC527: F2 0F 10 8B F0 00 00 00     -  movsd xmm1,[rbx+000000F0]
"coregame_rmdwin10_f.dll"+AC52F: 0F 29 84 24 80 00 00 00     -  movaps [rsp+00000080],xmm0
"coregame_rmdwin10_f.dll"+AC537: 89 84 24 80 00 00 00        -  mov [rsp+00000080],eax
"coregame_rmdwin10_f.dll"+AC53E: F3 0F 2C 47 08              -  cvttss2si eax,[rdi+08]
"coregame_rmdwin10_f.dll"+AC543: F2 0F 11 8C 24 90 00 00 00  -  movsd [rsp+00000090],xmm1
// ---------- INJECTING HERE ----------
"coregame_rmdwin10_f.dll"+AC54C: 89 84 24 84 00 00 00        -  mov [rsp+00000084],eax
// ---------- DONE INJECTING  ----------
"coregame_rmdwin10_f.dll"+AC553: E8 28 02 00 00              -  call coregame_rmdwin10_f.dll+AC780
"coregame_rmdwin10_f.dll"+AC558: 48 8B 9C 24 B0 00 00 00     -  mov rbx,[rsp+000000B0]
"coregame_rmdwin10_f.dll"+AC560: B0 01                       -  mov al,01
"coregame_rmdwin10_f.dll"+AC562: 48 81 C4 A0 00 00 00        -  add rsp,000000A0
"coregame_rmdwin10_f.dll"+AC569: 5F                          -  pop rdi
"coregame_rmdwin10_f.dll"+AC56A: C3                          -  ret 
"coregame_rmdwin10_f.dll"+AC56B: CC                          -  int 3 
"coregame_rmdwin10_f.dll"+AC56C: CC                          -  int 3 
"coregame_rmdwin10_f.dll"+AC56D: CC                          -  int 3 
"coregame_rmdwin10_f.dll"+AC56E: CC                          -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"lost focus pause removal"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// By Otis_Inf and Hattiwatti
// Updated by ghostinthecamera
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(LostFocusPause,coregame_rmdwin10_f.dll,44 88 41 x 48 8B 10 44 88 42 x) // should be unique
registersymbol(LostFocusPause)
alloc(newmem,$1000,"coregame_rmdwin10_f.dll"+AC26E)
//
alloc(hookreturnB,7)
registersymbol(hookreturnB)
//
label(code)
label(return)

newmem:

code:
  mov r8l, 01
  mov [rcx+7B],r8l
  mov rdx,[rax]
  jmp return

hookreturnB:
readmem(LostFocusPause,7)

LostFocusPause:
  jmp newmem
  nop 2
return:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
LostFocusPause:
readmem(hookreturnB,7)

unregistersymbol(hookreturnB)
unregistersymbol(LostFocusPause)
dealloc(hookreturnB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "coregame_rmdwin10_f.dll"+AC26E

"coregame_rmdwin10_f.dll"+AC24D: CC                             -  int 3 
"coregame_rmdwin10_f.dll"+AC24E: CC                             -  int 3 
"coregame_rmdwin10_f.dll"+AC24F: CC                             -  int 3 
"coregame_rmdwin10_f.dll"+AC250: 48 89 5C 24 10                 -  mov [rsp+10],rbx
"coregame_rmdwin10_f.dll"+AC255: 48 89 74 24 18                 -  mov [rsp+18],rsi
"coregame_rmdwin10_f.dll"+AC25A: 57                             -  push rdi
"coregame_rmdwin10_f.dll"+AC25B: 48 83 EC 40                    -  sub rsp,40
"coregame_rmdwin10_f.dll"+AC25F: 44 0F B6 42 04                 -  movzx r8d,byte ptr [rdx+04]
"coregame_rmdwin10_f.dll"+AC264: 48 8B D9                       -  mov rbx,rcx
"coregame_rmdwin10_f.dll"+AC267: 48 8B 05 7A 43 50 00           -  mov rax,[coregame_rmdwin10_f.dll+5B05E8]
// ---------- INJECTING HERE ----------
"coregame_rmdwin10_f.dll"+AC26E: 44 88 41 7B                    -  mov [rcx+7B],r8l
"coregame_rmdwin10_f.dll"+AC272: 48 8B 10                       -  mov rdx,[rax]
// ---------- DONE INJECTING  ----------
"coregame_rmdwin10_f.dll"+AC275: 44 88 42 39                    -  mov [rdx+39],r8l
"coregame_rmdwin10_f.dll"+AC279: 48 8B 49 50                    -  mov rcx,[rcx+50]
"coregame_rmdwin10_f.dll"+AC27D: 48 8B 01                       -  mov rax,[rcx]
"coregame_rmdwin10_f.dll"+AC280: FF 90 88 00 00 00              -  call qword ptr [rax+00000088]
"coregame_rmdwin10_f.dll"+AC286: 0F B6 4B 7B                    -  movzx ecx,byte ptr [rbx+7B]
"coregame_rmdwin10_f.dll"+AC28A: 48 8B F0                       -  mov rsi,rax
"coregame_rmdwin10_f.dll"+AC28D: 84 C9                          -  test cl,cl
"coregame_rmdwin10_f.dll"+AC28F: 75 43                          -  jne coregame_rmdwin10_f.dll+AC2D4
"coregame_rmdwin10_f.dll"+AC291: 83 BB B8 00 00 00 02           -  cmp dword ptr [rbx+000000B8],02
"coregame_rmdwin10_f.dll"+AC298: 75 78                          -  jne coregame_rmdwin10_f.dll+AC312
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"allow any res"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// By Otis_Inf and Hattiwatti
// Updated by ghostinthecamera
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(AnyRes,coregame_rmdwin10_f.dll,41 B8 x x x x 89 84 24 x x x x 0F 29 44 24 x) // should be unique
registersymbol(AnyRes)


//alloc(hookreturnC,6)
//registersymbol(hookreturnC)

//hookreturnC:
//readmem(AnyRes,6)

AnyRes:
mov r8d, 00000000
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
AnyRes:
mov r8d, 00000001

unregistersymbol(AnyRes)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Autoadjust AR"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// By Otis_Inf and Hattiwatti
// Updated by ghostinthecamera
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////

[ENABLE]
aobscanmodule(AutoAR,coregame_rmdwin10_f.dll,0F 85 x x x x 66 0F 6E CB 66 41 0F 6E C1) // should be unique
registersymbol(AutoAR)
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(hookreturnD,6)
registersymbol(hookreturnD)

hookreturnD:
readmem(AutoAR,6)

AutoAR:
db e9 C7 00 00 00 90
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
AutoAR:
readmem(hookreturnD,6)
//db 0F 85 BD 00 00 00
unregistersymbol(hookreturnD)
unregistersymbol(AutoAR)
dealloc(hookreturnD)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"disable show window call"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// By Otis_Inf and Hattiwatti
// Updated by ghostinthecamera
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////
[ENABLE]
aobscanmodule(DisableSW,coregame_rmdwin10_f.dll,FF 15 x x x x B2 x 88 55 x 44 8B x x x x x) // should be unique
registersymbol(DisableSW)
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(hookreturnE,6)
registersymbol(hookreturnE)

hookreturnE:
readmem(DisableSW,6)



DisableSW:
db 90 90 90 90 90 90
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
DisableSW:
readmem(hookreturnE,6)
//db FF 15 AC 38 50 00

dealloc(hookreturnE)
unregistersymbol(hookreturnE)
unregistersymbol(DisableSW)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Pause"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// By Otis_Inf and Hattiwatti
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////
[ENABLE]
// global r::Timer instance, offset 39
// See notes for location
[Control_DX12.exe+12A0748]+39:
db 1
[Control_DX12.exe+12A0748]+69:
db 1

timerAddress:
dq 0


[DISABLE]
// global r::Timer instance, offset 38
[Control_DX12.exe+12A0748]+38:
dd 0
[Control_DX12.exe+12A0748]+68:
dd 0
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>106</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Debug Cam"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// By Otis_Inf and Hattiwatti
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////
[ENABLE]
alloc(enableFreeCamThread,248)
aobscanmodule(interceptFreeCamFoV,Control_DX12.exe,0F 10 43 70 0F 58 C3) // should be unique
//aobscanmodule(interceptCurrentCamByte,Control_DX12.exe,48 8B x x E8 x x x x 48 8D 15 x x x x 48 8B 0D x x x x)
//registersymbol(interceptCurrentCamByte)
alloc(newmem,$1000,"Control_DX12.exe"+3163BC)
label(code)
label(return)
registersymbol(interceptFreeCamFoV)
label(freeCameraStructAddress)
registersymbol(freeCameraStructAddress)
label(originalCameraCoords)
registersymbol(originalCameraCoords)
alloc(rotSpeed,4)
registersymbol(rotSpeed)

// Create a thread to call a couple of functions, then stop
createthread(enableFreeCamThread)

enableFreeCamThread:
  // first pull the current camera state from the cache. Using code from coregame_rmdwin10_f.coregame::CameraComponentState::getPosition
  mov rsi, Control_DX12.exe
  mov rcx, [rsi+012A06D8]                // hardcoded static address. See notes.
  mov rbx,[rcx+28]
  mov rdi,rdx
  call coregame_rmdwin10_f.coregame::TransformComponentState::getTypeIDStatic
  // then obtain the camera object address
  mov edx,eax
  mov rcx,rbx
  call rl_rmdwin10_f.r::GameObjectState::getComponentByTypeId
  // then read the coords and cache them. Coords are at offset D0 (see getPosition)
  mov rcx, originalCameraCoords
  mov ebx, [rax+D0]
  mov [rcx], ebx
  mov ebx, [rax+D4]
  mov [rcx+4], ebx
  mov ebx, [rax+D8]
  mov [rcx+8], ebx

  // enable freecam
  mov eax, 1
  mov [Control_DX12.exe+12A060C], eax
  call input_rmdwin10_f.input::InputManager::getInstance
  mov rcx, rax
  mov dl, 1
  call input_rmdwin10_f.input::InputManager::setFreeCameraWithoutPlayerControls
  // we'll leave the cache write to the interception of the FoV below.
  ret

// this is memory used to intercept the freecam fov.
newmem:
code:
  mov [freeCameraStructAddress], rbx

  pop rcx,
  mov edx,[rotSpeed]
  mov [rbx+8C],edx
  push rcx

  movups xmm0,[rbx+70]
  addps xmm0,xmm3
  movups [rbx+70],xmm0
  cmp byte [coordsReset], 1
  je done
  // write back the cached coords.
  push rcx
  push edx
  mov rcx, originalCameraCoords
  mov edx, [rcx]
  mov [rbx+70], edx
  mov edx, [rcx+4]
  mov [rbx+74], edx
  mov edx, [rcx+8]
  mov [rbx+78], rdx
  pop edx
  // set flag
  mov cl, 01
  mov [coordsReset], cl
  pop rcx
done:
  jmp return

freeCameraStructAddress:
dq 0

originalCameraCoords:
dd 0 0 0

coordsReset:
db 0

rotSpeed:
dd (float)0.01

interceptFreeCamFoV:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  nop
return:

// hide outlines. Contributed by Pigeon
Control_DX12.exe+1BC76A:
 db E9 92 00 00 00 90         // jmp instead of je

[DISABLE]
alloc(disableFreeCamThread,248)
createthread(disableFreeCamThread)

disableFreeCamThread:
  xor eax, eax
  mov [Control_DX12.exe+12A060C], eax
  call input_rmdwin10_f.input::InputManager::getInstance
  mov rcx, rax
  mov dl, 0
  call input_rmdwin10_f.input::InputManager::setFreeCameraWithoutPlayerControls
  ret

interceptFreeCamFoV:
  movups xmm0,[rbx+70]
  addps xmm0,xmm3
  movups [rbx+70],xmm0

Control_DX12.exe+1BC76A:
  db 0F 84 91 00 00 00

unregistersymbol(freeCameraStructAddress)
unregistersymbol(interceptFreeCamFoV)
unregistersymbol(originalCameraCoords)
dealloc(newmem)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>45</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Freecam FoV (NUMPAD-/+ Speed: +CTRL. Reset: CRTL-ALT-NUMPAD)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>freeCameraStructAddress</Address>
          <Offsets>
            <Offset>-20</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>107</Key>
              </Keys>
              <Value>0.05</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>109</Key>
              </Keys>
              <Value>0.05</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>18</Key>
                <Key>109</Key>
              </Keys>
              <Value>1.1344</Value>
              <ID>2</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Rotation speed (F9: 0.04, for mouse. CTRL-F9: 0.7, for controller)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>freeCameraStructAddress</Address>
          <Offsets>
            <Offset>8C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No description"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotSpeed</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>187</Key>
              </Keys>
              <Value>0.005</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>189</Key>
              </Keys>
              <Value>0.005</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"HUD Toggle"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// By Otis_Inf and Hattiwatti
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////
[ENABLE]
CoherentGTCore.WebCore::GraphicsLayer::setOpacity:
  // set opacity for all objects in any UI to 0. This method is called on many objects so this is
  // the easiest way without enumerating them all
  xorps xmm1,xmm1
  movss [rcx+00000168],xmm1
  ret


[DISABLE]
CoherentGTCore.WebCore::GraphicsLayer::setOpacity:
  // resume as normal
  movss [rcx+00000168],xmm1
  ret
  int 3
  int 3
  int 3

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>46</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Gameplay FOV"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// By Otis_Inf and Hattiwatti
// See for info about locations/data:
// https://github.com/FransBouma/InjectableGenericCameraSystem/blob/master/Notes/Control.txt
//////////////////////////////////////////////////////////
// FRAMED Screenshot Community. https://framedsc.github.io
//////////////////////////////////////////////////////////
[ENABLE]
aobscanmodule(FoVInterception,Control_DX12.exe,F3 0F 59 43 10) // should be unique
alloc(newmem,$1000,"Control_DX12.exe"+1FA3B2)

label(code)
label(return)
registersymbol(FoVInterception)
label(fovAddress)
registerSymbol(fovAddress)

newmem:

code:
  mulss xmm0,[rbx+10]
  mov [fovAddress], rbx
  jmp return

fovAddress:
dq 0

FoVInterception:
  jmp newmem
return:


[DISABLE]

FoVInterception:
  db F3 0F 59 43 10

unregistersymbol(FoVInterception)
dealloc(newmem)


</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Gameplay Fov"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>fovAddress</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>36</Key>
              </Keys>
              <Value>1.5</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"DoF"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>rend::RenderOptions::RenderDepthOfField</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>16528</ID>
      <Description>"Unlock All Outfits"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Control_DX11.exe
  Version: 
  Date   : 2020-08-27
  Author : Zach

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,Control_DX12.exe,41 8B 46 04 48 8B 8A 38 01 00 00 89 01 48 8B CE) // should be unique
alloc(newmem,$1000,"Control_DX12.exe"+1E4261)

label(code)
label(return)

newmem:

code:
  mov [r14+04],#1
  mov rcx,[rdx+00000138]
  jmp return

INJECT:
  jmp newmem
  nop 6
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 41 8B 46 04 48 8B 8A 38 01 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Control_DX11.exe"+1E4261

"Control_DX11.exe"+1E423B: 75 1D                    -  jne Control_DX11.exe+1E425A
"Control_DX11.exe"+1E423D: 48 8B 8E 20 03 00 00     -  mov rcx,[rsi+00000320]
"Control_DX11.exe"+1E4244: 48 85 C9                 -  test rcx,rcx
"Control_DX11.exe"+1E4247: 74 11                    -  je Control_DX11.exe+1E425A
"Control_DX11.exe"+1E4249: 48 8B 49 08              -  mov rcx,[rcx+08]
"Control_DX11.exe"+1E424D: 45 33 C0                 -  xor r8d,r8d
"Control_DX11.exe"+1E4250: 48 8B 01                 -  mov rax,[rcx]
"Control_DX11.exe"+1E4253: 41 8D 50 04              -  lea edx,[r8+04]
"Control_DX11.exe"+1E4257: FF 50 38                 -  call qword ptr [rax+38]
"Control_DX11.exe"+1E425A: 48 8B 96 40 03 00 00     -  mov rdx,[rsi+00000340]
// ---------- INJECTING HERE ----------
"Control_DX11.exe"+1E4261: 41 8B 46 04              -  mov eax,[r14+04]
"Control_DX11.exe"+1E4265: 48 8B 8A 38 01 00 00     -  mov rcx,[rdx+00000138]
// ---------- DONE INJECTING  ----------
"Control_DX11.exe"+1E426C: 89 01                    -  mov [rcx],eax
"Control_DX11.exe"+1E426E: 48 8B CE                 -  mov rcx,rsi
"Control_DX11.exe"+1E4271: 48 83 82 38 01 00 00 04  -  add qword ptr [rdx+00000138],04
"Control_DX11.exe"+1E4279: E8 E2 1B E8 FF           -  call Control_DX11.exe+65E60
"Control_DX11.exe"+1E427E: 48 8B 5C 24 50           -  mov rbx,[rsp+50]
"Control_DX11.exe"+1E4283: 33 C0                    -  xor eax,eax
"Control_DX11.exe"+1E4285: 48 8B 74 24 58           -  mov rsi,[rsp+58]
"Control_DX11.exe"+1E428A: 48 8B 7C 24 60           -  mov rdi,[rsp+60]
"Control_DX11.exe"+1E428F: 48 83 C4 40              -  add rsp,40
"Control_DX11.exe"+1E4293: 41 5E                    -  pop r14
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
