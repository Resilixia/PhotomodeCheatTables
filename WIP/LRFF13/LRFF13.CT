<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"DOF Kill"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(KillDOF,LRFF13.exe,F3 0F 10 49 6C F3 0F 10) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:


code:
  mov [ecx+6C],(float)5000.0
  movss xmm1,[ecx+6C]
  jmp return

KillDOF:
  jmp newmem
return:
registersymbol(KillDOF)

[DISABLE]

KillDOF:
  db F3 0F 10 49 6C

unregistersymbol(KillDOF)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "LRFF13.exe"+67A096

"LRFF13.exe"+67A089: CC                       -  int 3 
"LRFF13.exe"+67A08A: CC                       -  int 3 
"LRFF13.exe"+67A08B: CC                       -  int 3 
"LRFF13.exe"+67A08C: CC                       -  int 3 
"LRFF13.exe"+67A08D: CC                       -  int 3 
"LRFF13.exe"+67A08E: CC                       -  int 3 
"LRFF13.exe"+67A08F: CC                       -  int 3 
"LRFF13.exe"+67A090: 55                       -  push ebp
"LRFF13.exe"+67A091: 8B EC                    -  mov ebp,esp
"LRFF13.exe"+67A093: 83 EC 18                 -  sub esp,18
// ---------- INJECTING HERE ----------
"LRFF13.exe"+67A096: F3 0F 10 49 6C           -  movss xmm1,[ecx+6C]
// ---------- DONE INJECTING  ----------
"LRFF13.exe"+67A09B: F3 0F 10 51 70           -  movss xmm2,[ecx+70]
"LRFF13.exe"+67A0A0: 0F 5A C1                 -  cvtps2pd xmm0,xmm1
"LRFF13.exe"+67A0A3: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"LRFF13.exe"+67A0A6: F2 0F 5C C2              -  subsd xmm0,xmm2
"LRFF13.exe"+67A0AA: F3 0F 10 51 78           -  movss xmm2,[ecx+78]
"LRFF13.exe"+67A0AF: 0F 57 DB                 -  xorps xmm3,xmm3
"LRFF13.exe"+67A0B2: 66 0F 5A D8              -  cvtpd2ps xmm3,xmm0
"LRFF13.exe"+67A0B6: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"LRFF13.exe"+67A0B9: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"LRFF13.exe"+67A0BC: 0F 5A C3                 -  cvtps2pd xmm0,xmm3
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>556</ID>
      <Description>"BLOOM Kill"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(killbloom,LRFF13.exe,3A F3 0F 7E 07 66 0F D6 00 F3 0F 7E 47 08) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //movq xmm0,[edi+08]
  jmp return

killbloom+09:
  jmp newmem
return:
registersymbol(killbloom)

[DISABLE]

killbloom+09:
  db F3 0F 7E 47 08

unregistersymbol(killbloom)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "LRFF13.exe"+579697

"LRFF13.exe"+579673: 89 55 F8              -  mov [ebp-08],edx
"LRFF13.exe"+579676: C7 45 FC 2C 33 E8 01  -  mov [ebp-04],LRFF13.exe+1CF332C
"LRFF13.exe"+57967D: E8 0E 51 DE FF        -  call LRFF13.exe+35E790
"LRFF13.exe"+579682: 83 C4 08              -  add esp,08
"LRFF13.exe"+579685: 89 46 2C              -  mov [esi+2C],eax
"LRFF13.exe"+579688: 8B 46 2C              -  mov eax,[esi+2C]
"LRFF13.exe"+57968B: 85 C0                 -  test eax,eax
"LRFF13.exe"+57968D: 74 3A                 -  je LRFF13.exe+5796C9
"LRFF13.exe"+57968F: F3 0F 7E 07           -  movq xmm0,[edi]
"LRFF13.exe"+579693: 66 0F D6 00           -  movq [eax],xmm0
// ---------- INJECTING HERE ----------
"LRFF13.exe"+579697: F3 0F 7E 47 08        -  movq xmm0,[edi+08]
// ---------- DONE INJECTING  ----------
"LRFF13.exe"+57969C: 66 0F D6 40 08        -  movq [eax+08],xmm0
"LRFF13.exe"+5796A1: F3 0F 7E 47 10        -  movq xmm0,[edi+10]
"LRFF13.exe"+5796A6: 66 0F D6 40 10        -  movq [eax+10],xmm0
"LRFF13.exe"+5796AB: 8B 4F 18              -  mov ecx,[edi+18]
"LRFF13.exe"+5796AE: 5F                    -  pop edi
"LRFF13.exe"+5796AF: 89 48 18              -  mov [eax+18],ecx
"LRFF13.exe"+5796B2: 5E                    -  pop esi
"LRFF13.exe"+5796B3: 8B E5                 -  mov esp,ebp
"LRFF13.exe"+5796B5: 5D                    -  pop ebp
"LRFF13.exe"+5796B6: C2 04 00              -  ret 0004
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7262</ID>
      <Description>"timestop v2"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2022-01-09
  Author : Hussain

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(timestop,LRFF13.exe,F2 0F 59 05 E0 18 1E 01 F2 0F 2C C0 3B 45) // should be unique
registersymbol(timestop)
alloc(newmem,$1000)

timestop:
  db 90 90 90 90 90 90 90 90

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
timestop:
  db F2 0F 59 05 E0 18 1E 01

unregistersymbol(timestop)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: LRFF13.exe+6B95F8

LRFF13.exe+6B95DE: FF D0                    - call eax
LRFF13.exe+6B95E0: 8B 10                    - mov edx,[eax]
LRFF13.exe+6B95E2: 8B C8                    - mov ecx,eax
LRFF13.exe+6B95E4: 8B 42 10                 - mov eax,[edx+10]
LRFF13.exe+6B95E7: FF D0                    - call eax
LRFF13.exe+6B95E9: D9 E8                    - fld1 
LRFF13.exe+6B95EB: DE F1                    - fdivrp st(1),st(0)
LRFF13.exe+6B95ED: D9 5D E8                 - fstp dword ptr [ebp-18]
LRFF13.exe+6B95F0: F3 0F 10 45 E8           - movss xmm0,[ebp-18]
LRFF13.exe+6B95F5: 0F 5A C0                 - cvtps2pd xmm0,xmm0
// ---------- INJECTING HERE ----------
LRFF13.exe+6B95F8: F2 0F 59 05 E0 18 1E 01  - mulsd xmm0,[LRFF13.exe+9F18E0]
// ---------- DONE INJECTING  ----------
LRFF13.exe+6B9600: F2 0F 2C C0              - cvttsd2si eax,xmm0
LRFF13.exe+6B9604: 3B 45 F0                 - cmp eax,[ebp-10]
LRFF13.exe+6B9607: 89 45 E8                 - mov [ebp-18],eax
LRFF13.exe+6B960A: 8D 45 E8                 - lea eax,[ebp-18]
LRFF13.exe+6B960D: 7C 03                    - jl LRFF13.exe+6B9612
LRFF13.exe+6B960F: 8D 45 F0                 - lea eax,[ebp-10]
LRFF13.exe+6B9612: 8B 08                    - mov ecx,[eax]
LRFF13.exe+6B9614: 8B 16                    - mov edx,[esi]
LRFF13.exe+6B9616: 8B 42 10                 - mov eax,[edx+10]
LRFF13.exe+6B9619: 89 4D F0                 - mov [ebp-10],ecx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>553</ID>
      <Description>"Timestop"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-05-16
  Author : skall

  This script does blah blah blah
}

define(address,"LRFF13.exe"+6B87C8)
define(bytes,F2 0F 59 05 E0 18 B8 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //mulsd xmm0,[LRFF13.exe+9F18E0]
  jmp return

address:
  jmp newmem
  nop 3
return:

[DISABLE]

address:
  db bytes
  // mulsd xmm0,[LRFF13.exe+9F18E0]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: LRFF13.exe+6B87C8

LRFF13.exe+6B87AE: FF D0                    - call eax
LRFF13.exe+6B87B0: 8B 10                    - mov edx,[eax]
LRFF13.exe+6B87B2: 8B C8                    - mov ecx,eax
LRFF13.exe+6B87B4: 8B 42 10                 - mov eax,[edx+10]
LRFF13.exe+6B87B7: FF D0                    - call eax
LRFF13.exe+6B87B9: D9 E8                    - fld1 
LRFF13.exe+6B87BB: DE F1                    - fdivrp st(1),st(0)
LRFF13.exe+6B87BD: D9 5D E8                 - fstp dword ptr [ebp-18]
LRFF13.exe+6B87C0: F3 0F 10 45 E8           - movss xmm0,[ebp-18]
LRFF13.exe+6B87C5: 0F 5A C0                 - cvtps2pd xmm0,xmm0
// ---------- INJECTING HERE ----------
LRFF13.exe+6B87C8: F2 0F 59 05 E0 18 3F 01  - mulsd xmm0,[LRFF13.exe+9F18E0]
// ---------- DONE INJECTING  ----------
LRFF13.exe+6B87D0: F2 0F 2C C0              - cvttsd2si eax,xmm0
LRFF13.exe+6B87D4: 3B 45 F0                 - cmp eax,[ebp-10]
LRFF13.exe+6B87D7: 89 45 E8                 - mov [ebp-18],eax
LRFF13.exe+6B87DA: 8D 45 E8                 - lea eax,[ebp-18]
LRFF13.exe+6B87DD: 7C 03                    - jl LRFF13.exe+6B87E2
LRFF13.exe+6B87DF: 8D 45 F0                 - lea eax,[ebp-10]
LRFF13.exe+6B87E2: 8B 08                    - mov ecx,[eax]
LRFF13.exe+6B87E4: 8B 16                    - mov edx,[esi]
LRFF13.exe+6B87E6: 8B 42 10                 - mov eax,[edx+10]
LRFF13.exe+6B87E9: 89 4D F0                 - mov [ebp-10],ecx
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>220</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>554</ID>
      <Description>"HUD"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(HUD,LRFF13.exe,0F 82 03 FD FF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //jb LRFF13.exe+646FD0
  jmp return

HUD:
  jmp newmem
  nop
return:
registersymbol(HUD)

[DISABLE]

HUD:
  db 0F 82 03 FD FF FF

unregistersymbol(HUD)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "LRFF13.exe"+6472C7

"LRFF13.exe"+6472AB: 83 F9 FF                       -  cmp ecx,-01
"LRFF13.exe"+6472AE: 0F 85 6C FF FF FF              -  jne LRFF13.exe+647220
"LRFF13.exe"+6472B4: 33 C0                          -  xor eax,eax
"LRFF13.exe"+6472B6: 8B 4B 04                       -  mov ecx,[ebx+04]
"LRFF13.exe"+6472B9: 2B 0B                          -  sub ecx,[ebx]
"LRFF13.exe"+6472BB: 8B 55 D0                       -  mov edx,[ebp-30]
"LRFF13.exe"+6472BE: 42                             -  inc edx
"LRFF13.exe"+6472BF: C1 F9 02                       -  sar ecx,02
"LRFF13.exe"+6472C2: 89 55 D0                       -  mov [ebp-30],edx
"LRFF13.exe"+6472C5: 3B D1                          -  cmp edx,ecx
// ---------- INJECTING HERE ----------
"LRFF13.exe"+6472C7: 0F 82 03 FD FF FF              -  jb LRFF13.exe+646FD0
// ---------- DONE INJECTING  ----------
"LRFF13.exe"+6472CD: 5F                             -  pop edi
"LRFF13.exe"+6472CE: 8B 4D FC                       -  mov ecx,[ebp-04]
"LRFF13.exe"+6472D1: 89 86 C4 06 00 00              -  mov [esi+000006C4],eax
"LRFF13.exe"+6472D7: 5E                             -  pop esi
"LRFF13.exe"+6472D8: 33 CD                          -  xor ecx,ebp
"LRFF13.exe"+6472DA: 5B                             -  pop ebx
"LRFF13.exe"+6472DB: E8 2C 4F 29 00                 -  call LRFF13.exe+8DC20C
"LRFF13.exe"+6472E0: 8B E5                          -  mov esp,ebp
"LRFF13.exe"+6472E2: 5D                             -  pop ebp
"LRFF13.exe"+6472E3: C3                             -  ret 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>555</ID>
      <Description>"Hair Improvement"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(hairImprovement,LRFF13.exe,75 05 BA 03 00 00 00) // should be unique
alloc(newmem,$1000)

registersymbol(hairImprovement)

hairImprovement:
  db 90 90

[DISABLE]

hairImprovement:
  db 75 05 BA 03 00 00 00

unregistersymbol(hairImprovement)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "LRFF13.exe"+646EBC

"LRFF13.exe"+646EA4: 53                       -  push ebx
"LRFF13.exe"+646EA5: 57                       -  push edi
"LRFF13.exe"+646EA6: F3 0F 11 45 F8           -  movss [ebp-08],xmm0
"LRFF13.exe"+646EAB: F6 C4 44                 -  test ah,44
"LRFF13.exe"+646EAE: 7B 04                    -  jnp LRFF13.exe+646EB4
"LRFF13.exe"+646EB0: B3 01                    -  mov bl,01
"LRFF13.exe"+646EB2: EB 02                    -  jmp LRFF13.exe+646EB6
"LRFF13.exe"+646EB4: 32 DB                    -  xor bl,bl
"LRFF13.exe"+646EB6: 8B 56 18                 -  mov edx,[esi+18]
"LRFF13.exe"+646EB9: 83 FA FF                 -  cmp edx,-01
// ---------- INJECTING HERE ----------
"LRFF13.exe"+646EBC: 75 05                    -  jne LRFF13.exe+646EC3
"LRFF13.exe"+646EBE: BA 03 00 00 00           -  mov edx,00000003
// ---------- DONE INJECTING  ----------
"LRFF13.exe"+646EC3: 8B 41 18                 -  mov eax,[ecx+18]
"LRFF13.exe"+646EC6: 48                       -  dec eax
"LRFF13.exe"+646EC7: 89 45 FC                 -  mov [ebp-04],eax
"LRFF13.exe"+646ECA: 3B D0                    -  cmp edx,eax
"LRFF13.exe"+646ECC: 89 55 08                 -  mov [ebp+08],edx
"LRFF13.exe"+646ECF: 8D 45 08                 -  lea eax,[ebp+08]
"LRFF13.exe"+646ED2: 72 03                    -  jb LRFF13.exe+646ED7
"LRFF13.exe"+646ED4: 8D 45 FC                 -  lea eax,[ebp-04]
"LRFF13.exe"+646ED7: 8B 38                    -  mov edi,[eax]
"LRFF13.exe"+646ED9: 84 DB                    -  test bl,bl
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>561</ID>
      <Description>"CAMERA"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]
globalalloc(rotMemory, 0x100, "LRFF13.exe"+6CF40A)
aobscanmodule(Camera,LRFF13.exe,CC CC CC CC CC CC CC CC CC 55 8B EC 8B 45 08 F3 0F 7E 00 66 0F D6 41 2C)
alloc(newmem,$1000,"LRFF13.exe"+6CF40A)

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00

rotMemory+4C:
db 00 00 00 00


label(code)
label(return)

label(pCam)
registersymbol(pCam)

newmem:

code:
  push edx
  lea edx,[ecx+2C]
  mov [pCam],ecx
  mov [rotMemory+50],edx
  pop edx
  //movq [ecx+2C],xmm0
  movq xmm0,[eax+08]
  //movq [ecx+34],xmm0
  movq xmm0,[eax+10]
  //movq [ecx+3C],xmm0
  movq xmm0,[eax+18]
  //movq [ecx+44],xmm0
  movq xmm0,[eax+20]
  //movq [ecx+4C],xmm0
  movq xmm0,[eax+28]
  //movq [ecx+54],xmm0

//Row1


  movss xmm5,[rotMemory+10]
  movss [ecx+2C],xmm5

  movss xmm5,[rotMemory+1C]
  movss [ecx+30],xmm5

  movss xmm5,[rotMemory+28]
  movss [ecx+34],xmm5

//Row2

  movss xmm5,[rotMemory+14]
  movss [ecx+3C],xmm5

  movss xmm5,[rotMemory+20]
  movss [ecx+40],xmm5

  movss xmm5,[rotMemory+2C]
  movss [ecx+44],xmm5

//Row3

  movss xmm5,[rotMemory+18]
  movss [ecx+4C],xmm5

  movss xmm5,[rotMemory+24]
  movss [ecx+50],xmm5

  movss xmm5,[rotMemory+30]
  movss [ecx+54],xmm5

//Coords

  movss xmm5,[rotMemory+34]
  movss [ecx+5C],xmm5

  movss xmm5,[rotMemory+38]
  movss [ecx+60],xmm5

  movss xmm5,[rotMemory+3C]
  movss [ecx+64],xmm5




  jmp return

pCam:
dq 0

Camera+13:
  jmp newmem
  nop 32
return:
registersymbol(Camera)

///
aobscanmodule(killwritecamerasec,LRFF13.exe,66 0F D6 41 5C F3 0F 7E 40 38 66 0F D6 41 64 C6)

registersymbol(killwritecamerasec)

killwritecamerasec:
  db 90 90 90 90 90 F3 0F 7E 40 38 90 90 90 90 90

[DISABLE]

Camera+13:
  db 66 0F D6 41 2C
  movq xmm0,[eax+08]
  movq [ecx+34],xmm0
  movq xmm0,[eax+10]
  movq [ecx+3C],xmm0
  movq xmm0,[eax+18]
  movq [ecx+44],xmm0
  movq xmm0,[eax+20]
  movq [ecx+4C],xmm0
  movq xmm0,[eax+28]
  movq [ecx+54],xmm0

killwritecamerasec:
  db 66 0F D6 41 5C F3 0F 7E 40 38 66 0F D6 41 64

unregistersymbol(killwritecamerasec)

unregistersymbol(Camera)
unregistersymbol(pCam)

dealloc(newmem)

{
LRFF13.exe+6CF40A
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7260</ID>
      <Description>"Kill Camera Memory"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-09-18
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscan(killwrite,F3 0F 11 69 5C) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //movss [ecx+5C],xmm5
  movss xmm5,[00380038]
  //movss [ecx+60],xmm5
  movss xmm5,[0038003C]
  //movss [ecx+64],xmm5
  jmp return

killwrite:
  jmp newmem
  nop 1A
return:
registersymbol(killwrite)

[DISABLE]

killwrite:
  db F3 0F 11 69 5C
  movss xmm5,[00380038]
  movss [ecx+60],xmm5
  movss xmm5,[0038003C]
  movss [ecx+64],xmm5

unregistersymbol(killwrite)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 003700A2

00370061: F3 0F 11 69 40           - movss [ecx+40],xmm5
00370066: F3 0F 10 2D 2C 00 38 00  - movss xmm5,[0038002C]
0037006E: F3 0F 11 69 44           - movss [ecx+44],xmm5
00370073: F3 0F 10 2D 18 00 38 00  - movss xmm5,[00380018]
0037007B: F3 0F 11 69 4C           - movss [ecx+4C],xmm5
00370080: F3 0F 10 2D 24 00 38 00  - movss xmm5,[00380024]
00370088: F3 0F 11 69 50           - movss [ecx+50],xmm5
0037008D: F3 0F 10 2D 30 00 38 00  - movss xmm5,[00380030]
00370095: F3 0F 11 69 54           - movss [ecx+54],xmm5
0037009A: F3 0F 10 2D 34 00 38 00  - movss xmm5,[00380034]
// ---------- INJECTING HERE ----------
003700A2: F3 0F 11 69 5C           - movss [ecx+5C],xmm5
// ---------- DONE INJECTING  ----------
003700A7: F3 0F 10 2D 38 00 38 00  - movss xmm5,[00380038]
003700AF: F3 0F 11 69 60           - movss [ecx+60],xmm5
003700B4: F3 0F 10 2D 3C 00 38 00  - movss xmm5,[0038003C]
003700BC: F3 0F 11 69 64           - movss [ecx+64],xmm5
003700C1: E9 7B F3 DF 00           - jmp LRFF13.exe+6CF441
pCam: A0 BC FA DD 00           - mov al,[LRFF13.exe+33FABC]
003700CB: 00 00                    - add [eax],al
003700CD: 00 00                    - add [eax],al
003700CF: 00 00                    - add [eax],al
003700D1: 00 00                    - add [eax],al
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>564</ID>
      <Description>"Kill FOV"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(fovmodif,LRFF13.exe,00 55 8B EC 8B 45 08 F3 0F 7E 00 66 0F D6 41 6C) // should be unique
alloc(newmem,$1000)

newmem:

registersymbol(fovmodif)

fovmodif+0B:
  db 90 90 90 90 90 F3 0F 7E 40 08 66 0F D6 41 74 F3 0F 7E 40 10 90 90 90 90 90

[DISABLE]

fovmodif+0B:
  db 66 0F D6 41 6C F3 0F 7E 40 08 66 0F D6 41 74 F3 0F 7E 40 10 66 0F D6 41 7C

unregistersymbol(fovmodif)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "LRFF13.exe"+6CE6BA

"LRFF13.exe"+6CE696: 66 0F D6 41 5C           -  movq [ecx+5C],xmm0
"LRFF13.exe"+6CE69B: F3 0F 7E 40 38           -  movq xmm0,[eax+38]
"LRFF13.exe"+6CE6A0: 66 0F D6 41 64           -  movq [ecx+64],xmm0
"LRFF13.exe"+6CE6A5: C6 81 B0 00 00 00 01     -  mov byte ptr [ecx+000000B0],01
"LRFF13.exe"+6CE6AC: 5D                       -  pop ebp
"LRFF13.exe"+6CE6AD: C2 04 00                 -  ret 0004
"LRFF13.exe"+6CE6B0: 55                       -  push ebp
"LRFF13.exe"+6CE6B1: 8B EC                    -  mov ebp,esp
"LRFF13.exe"+6CE6B3: 8B 45 08                 -  mov eax,[ebp+08]
"LRFF13.exe"+6CE6B6: F3 0F 7E 00              -  movq xmm0,[eax]
// ---------- INJECTING HERE ----------
"LRFF13.exe"+6CE6BA: 66 0F D6 41 6C           -  movq [ecx+6C],xmm0
// ---------- DONE INJECTING  ----------
"LRFF13.exe"+6CE6BF: F3 0F 7E 40 08           -  movq xmm0,[eax+08]
"LRFF13.exe"+6CE6C4: 66 0F D6 41 74           -  movq [ecx+74],xmm0
"LRFF13.exe"+6CE6C9: F3 0F 7E 40 10           -  movq xmm0,[eax+10]
"LRFF13.exe"+6CE6CE: 66 0F D6 41 7C           -  movq [ecx+7C],xmm0
"LRFF13.exe"+6CE6D3: F3 0F 7E 40 18           -  movq xmm0,[eax+18]
"LRFF13.exe"+6CE6D8: 66 0F D6 81 84 00 00 00  -  movq [ecx+00000084],xmm0
"LRFF13.exe"+6CE6E0: F3 0F 7E 40 20           -  movq xmm0,[eax+20]
"LRFF13.exe"+6CE6E5: 66 0F D6 81 8C 00 00 00  -  movq [ecx+0000008C],xmm0
"LRFF13.exe"+6CE6ED: F3 0F 7E 40 28           -  movq xmm0,[eax+28]
"LRFF13.exe"+6CE6F2: 66 0F D6 81 94 00 00 00  -  movq [ecx+00000094],xmm0
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>567</ID>
      <Description>"FOV Calculation"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : LRFF13.exe
  Version: 
  Date   : 2021-06-26
  Author : skall

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(fovcalc,LRFF13.exe,F3 0F 10 00 F3 0F 10 48 04 8B 4D FC 8D) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

label(hfov)
label(OGhfov)
label(OGvfov)
label(fovscalar)

registersymbol(hfov)
registersymbol(OGhfov)
registersymbol(OGvfov)
registersymbol(fovscalar)

newmem:

code:

  mov [hfov],eax

  movss xmm5,[fovscalar]
  movss xmm4,[eax]
  mulss xmm5,xmm4
  movss [eax+14],xmm5

  jmp return

hfov:
dq 0

OGhfov:
dq (float)1.47

OGvfov:
dq (float)2.61

fovscalar:
dd (float)1.77

fovcalc:
  jmp newmem
  nop 4
return:
registersymbol(fovcalc)

[DISABLE]

fovcalc:
  db F3 0F 10 00 F3 0F 10 48 04

unregistersymbol(fovcalc)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: LRFF13.exe+82BFCF

LRFF13.exe+82BFAC: 8B 4D FC           - mov ecx,[ebp-04]
LRFF13.exe+82BFAF: FF D0              - call eax
LRFF13.exe+82BFB1: 83 7D F8 01        - cmp dword ptr [ebp-08],01
LRFF13.exe+82BFB5: 0F 84 BF 00 00 00  - je LRFF13.exe+82C07A
LRFF13.exe+82BFBB: 8B 4D F4           - mov ecx,[ebp-0C]
LRFF13.exe+82BFBE: 8B 11              - mov edx,[ecx]
LRFF13.exe+82BFC0: 8B 42 20           - mov eax,[edx+20]
LRFF13.exe+82BFC3: FF D0              - call eax
LRFF13.exe+82BFC5: F3 0F 10 50 08     - movss xmm2,[eax+08]
LRFF13.exe+82BFCA: F3 0F 10 58 0C     - movss xmm3,[eax+0C]
// ---------- INJECTING HERE ----------
LRFF13.exe+82BFCF: F3 0F 10 00        - movss xmm0,[eax]
// ---------- DONE INJECTING  ----------
LRFF13.exe+82BFD3: F3 0F 10 48 04     - movss xmm1,[eax+04]
LRFF13.exe+82BFD8: 8B 4D FC           - mov ecx,[ebp-04]
LRFF13.exe+82BFDB: 8D 95 60 FF FF FF  - lea edx,[ebp-000000A0]
LRFF13.exe+82BFE1: 52                 - push edx
LRFF13.exe+82BFE2: 0F 14 C2           - unpcklps xmm0,xmm2
LRFF13.exe+82BFE5: F3 0F 10 50 18     - movss xmm2,[eax+18]
LRFF13.exe+82BFEA: 0F 14 CB           - unpcklps xmm1,xmm3
LRFF13.exe+82BFED: F3 0F 10 58 1C     - movss xmm3,[eax+1C]
LRFF13.exe+82BFF2: 0F 14 C1           - unpcklps xmm0,xmm1
LRFF13.exe+82BFF5: F3 0F 10 48 14     - movss xmm1,[eax+14]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>565</ID>
          <Description>"No description"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>hfov</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7257</ID>
      <Description>"Smooth"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(rotMemory, 0x100, "LRFF13.exe"+6CF40A)
{$lua}
if syntaxcheck then return end

[ENABLE]

function speedCheck()

  if isKeyPressed(VK_LMENU) then
    return 1
  end

  return 0.1
end

function speedCheckRotation()

  if isKeyPressed(VK_LMENU) then
    return 1.5
  end

  return 0.5
end

function speedCheckFieldofview()

  if isKeyPressed(VK_LCONTROL) then
    return 0.1
  end

  return 1
end

function keyCheck()

--coords/fov
local rotMemory = getAddressSafe("rotMemory")
local yaw = readFloat(rotMemory+0)
local roll = readFloat(rotMemory+8)
local pitch = readFloat(rotMemory+4)
local fov = readFloat("[hfov]+40")

local camx = readFloat("[pCam]+5C")
local camy = readFloat("[pCam]+60")
local camz = readFloat("[pCam]+64")

--hotkeys

  if isKeyPressed(VK_NUMPAD6) then
     writeFloat("[pCam]+5C", camx  - speedCheck())
  end

  if isKeyPressed(VK_NUMPAD4) then
     writeFloat("[pCam]+5C", camx + speedCheck())
  end

  if isKeyPressed(VK_NUMPAD7) then
     writeFloat("[pCam]+60", camy - speedCheck())
  end

  if isKeyPressed(VK_NUMPAD9) then
     writeFloat("[pCam]+60", camy + speedCheck())
  end

  if isKeyPressed(VK_NUMPAD5) then
     writeFloat("[pCam]+64", camz - speedCheck())
  end

  if isKeyPressed(VK_NUMPAD8) then
     writeFloat("[pCam]+64", camz + speedCheck())
  end

  if isKeyPressed(VK_NUMPAD1) then
     writeFloat(rotMemory+8, roll + speedCheckRotation())
  end

  if isKeyPressed(VK_NUMPAD3) then
     writeFloat(rotMemory+8, roll - speedCheckRotation())
  end

  if isKeyPressed(VK_UP) then
     writeFloat(rotMemory+4, pitch - speedCheckRotation())
  end

  if isKeyPressed(VK_DOWN) then
     writeFloat(rotMemory+4, pitch + speedCheckRotation())
  end

  if isKeyPressed(VK_LEFT) then
     writeFloat(rotMemory+0, yaw - speedCheckRotation())
  end

  if isKeyPressed(VK_RIGHT) then
     writeFloat(rotMemory+0, yaw + speedCheckRotation())
  end

  if isKeyPressed(VK_ADD) then
     writeFloat("[hfov]+40", fov - 0.01)
  end

  if isKeyPressed(VK_SUBTRACT) then
     writeFloat("[hfov]+40", fov + 0.01)
  end

end

function timerStart(timer)
  t=createTimer()
  t.OnTimer=keyCheck
  t.Interval=10
  t.Enabled=true
end

timerStart(t)

[DISABLE]
t.destroy()
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7253</ID>
          <Description>"Cam Address Pointer"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>rotMemory+50</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>55</ID>
      <Description>"Enable FIRST! (HOME to enable, END to disable)"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
local degToRad = math.pi / 180
prevYaw = 0
prevPitch = 0
prevRoll = 0

function calcCurrentEyePos(rotMemory)
    local xAxis = {}
    local yAxis = {}
    local zAxis = {}
    local pos = {}

    xAxis[1] = readFloat(rotMemory+16)
    xAxis[2] = readFloat(rotMemory+20)
    xAxis[3] = readFloat(rotMemory+24)
    pos[1] = readFloat(rotMemory+52)

    yAxis[1] = readFloat(rotMemory+28)
    yAxis[2] = readFloat(rotMemory+32)
    yAxis[3] = readFloat(rotMemory+36)
    pos[2] = readFloat(rotMemory+56)

    zAxis[1] = readFloat(rotMemory+40)
    zAxis[2] = readFloat(rotMemory+44)
    zAxis[3] = readFloat(rotMemory+48)
    pos[3] = readFloat(rotMemory+60)

    local realPos = {}
    realPos[1] = pos[1] * xAxis[1] + pos[2] * yAxis[1] + pos[3] * zAxis[1]
    realPos[2] = pos[1] * xAxis[2] + pos[2] * yAxis[2] + pos[3] * zAxis[2]
    realPos[3] = pos[1] * xAxis[3] + pos[2] * yAxis[3] + pos[3] * zAxis[3]

    realPos[1] = -1 * realPos[1]
    realPos[2] = -1 * realPos[2]
    realPos[3] = -1 * realPos[3]

    return realPos
end

function initCamera(cameraPtr, rotMemory)
    local xAxis = {}
    local yAxis = {}
    local zAxis = {}
    local pos = {}

    --print("fuckshitpiss")

    xAxis[1] = readFloat(cameraPtr+0)
    xAxis[2] = readFloat(cameraPtr+16)
    xAxis[3] = readFloat(cameraPtr+32)
    pos[1] = readFloat(cameraPtr+48)

    yAxis[1] = readFloat(cameraPtr+4)
    yAxis[2] = readFloat(cameraPtr+20)
    yAxis[3] = readFloat(cameraPtr+36)
    pos[2] = readFloat(cameraPtr+52)

    zAxis[1] = readFloat(cameraPtr+8)
    zAxis[2] = readFloat(cameraPtr+24)
    zAxis[3] = readFloat(cameraPtr+40)
    pos[3] = readFloat(cameraPtr+56)

    local realPos = {}
    realPos[1] = pos[1] * xAxis[1] + pos[2] * yAxis[1] + pos[3] * zAxis[1]
    realPos[2] = pos[1] * xAxis[2] + pos[2] * yAxis[2] + pos[3] * zAxis[2]
    realPos[3] = pos[1] * xAxis[3] + pos[2] * yAxis[3] + pos[3] * zAxis[3]

    writeFloat(rotMemory + 16, 1)
    writeFloat(rotMemory + 20, 0)
    writeFloat(rotMemory + 24, 0)
    writeFloat(rotMemory + 28, 0)
    writeFloat(rotMemory + 32, 1)
    writeFloat(rotMemory + 36, 0)
    writeFloat(rotMemory + 40, 0)
    writeFloat(rotMemory + 44, 0)
    writeFloat(rotMemory + 48, 1)

    writeFloat(rotMemory + 52, realPos[1])
    writeFloat(rotMemory + 56, realPos[2])
    writeFloat(rotMemory + 60, realPos[3])

    writeFloat(rotMemory + 64, -realPos[1])
    writeFloat(rotMemory + 68, -realPos[2])
    writeFloat(rotMemory + 72, -realPos[3])

end

function calcDot(vec1, vec2)
    return vec1[1]*vec2[1] + vec1[2]*vec2[2] + vec1[3]*vec2[3]
end

function calcQuaternion(rotMemory, yaw, pitch, roll)
	pitch = pitch * degToRad
    yaw = yaw * degToRad
    roll = roll * degToRad

    local sx = math.sin(pitch)
    local cx = math.cos(pitch)
    local sy = math.sin(yaw)
    local cy = math.cos(yaw)
    local sz = math.sin(roll)
    local cz = math.cos(roll)

    local xAxis = {cy*cz, -cy*sz, sy}
    local yAxis = {sx*sy*cz + cx*sz,-sx*sy*sz + cx*cz,-sx*cy}
    local zAxis = {-cx*sy*cz + sx*sz,cx*sy*sz+sx*cz,cx*cy}

    local eyePos = calcCurrentEyePos(rotMemory)
    --print(xAxis[1] .. ' ' .. xAxis[2] .. ' ' .. xAxis[3])
    local coord = {-calcDot(xAxis,eyePos),-calcDot(yAxis,eyePos),-calcDot(zAxis,eyePos)}

    --xyz2
    --local r11 = cy*cz
    --local r12 = -cy*sz
    --local r13 = sy
    --local r21 = sx*sy*cz + cx*sz
    --local r22 = -sx*sy*sz + cx*cz
    --local r23 = -sx*cy
    --local r31 = -cx*sy*cz + sx*sz
    --local r32 = cx*sy*sz+sx*cz
    --local r33 = cx*cy

    --xzy
    --local r11 = cz*cy
    --local r12 = -sz
    --local r13 = cz*sy
    --local r21 = cx*sz*cy + sx*cy
    --local r22 = cx*cz
    --local r23 = cx*sz*sy-sx*cy
    --local r31 = -sx*sz*cy-cx*sy
    --local r32 = sx*cz
    --local r33 = sx*sz*sy+cx*cy

    --xzy2
    --local r11 = cz*cy
    --local r12 = -sz
    --local r13 = cz*sy
    --local r21 = cx*sz*cy + sx*cy
    --local r22 = cx*cz
    --local r23 = cx*sz*sy-sx*cy
    --local r31 = -sx*sz*cy-cx*sy
    --local r32 = sx*cz
    --local r33 = sx*sz*sy+cx*cy

    ---zxy
    --local r11 = -sz*sx*sy+cz*cy
    --local r12 = -sz*cx
    --local r13 = sz*sx*sy+cz*sy
    --local r21 = cz*sx*sy+sz*cy
    --local r22 = cz*cx
    --local r23 = -cz*cx*cy+sz*sy
    --local r31 = -cx*sy
    --local r32 = sx
    --local r33 = cx*cy

    --zyx
    --local r11 = cz * cy
    --local r12 = cz*sy*sx - sz*cx
    --local r13 = cz*sy*cx + sz*sx
    --local r21 = sz*cy
    --local r22 = sz*sy*sx + cz*cx
    --local r23 = sz*sy*cx - cz*sx
    --local r31 = -sy
    --local r32 = cy*sx
    --local r33 = cy*cx

    --yxz
    --local r11 = sy*sx*sz + cy+cz
    --local r12 = sy*sx*cz - cy*sz
    --local r13 = sy*cx
    --local r21 = cx*sz
    --local r22 = cx*cz
    --local r23 = -sx
    --local r31 = cy*sx*sz - sy*cz
    --local r32 = cy*sx*cz + sy*sz
    --local r33 = cy*cx

    --yxz2
    --local r11 = sy*sx*sz + cy+cz
    --local r12 = cx*sz
    --local r13 = cy*sx*sz - sy*cz
    --local r21 = sy*sx*cz - cy*sz
    --local r22 = cx*cz
    --local r23 = cy*sx*cz + sy*sz
    --local r31 = sy*cx
    --local r32 = -sx
    --local r33 = cy*cx


    --local w = cosY * cosX * cosZ + sinY * sinX * sinZ
    --local x = cosY * sinX * cosZ + sinY * cosX * sinZ
    --local y = sinY * cosX * cosZ - cosY * sinX * sinZ
    --local z = cosY * cosX * sinZ - sinY * sinX * cosZ

    writeFloat(rotMemory + 16, xAxis[1])
    writeFloat(rotMemory + 20, xAxis[2])
    writeFloat(rotMemory + 24, xAxis[3])
    writeFloat(rotMemory + 28, yAxis[1])
    writeFloat(rotMemory + 32, yAxis[2])
    writeFloat(rotMemory + 36, yAxis[3])
    writeFloat(rotMemory + 40, zAxis[1])
    writeFloat(rotMemory + 44, zAxis[2])
    writeFloat(rotMemory + 48, zAxis[3])
    writeFloat(rotMemory + 52, coord[1])
    writeFloat(rotMemory + 56, coord[2])
    writeFloat(rotMemory + 60, coord[3])
end

function printShit()
         print("Shit")
end

function timer_tick(timer)
         local rotMemory = getAddressSafe("rotMemory")
         if rotMemory == nil then
            return
         end

         local initialized = readInteger(rotMemory+76)
         if initialized == 0 then
            local camPtr = readPointer(rotMemory+80)
            if initialized == 0 then
               initCamera(camPtr, rotMemory)
               writeInteger(rotMemory+76, 1)
            end
            return
         end

         local yaw = readFloat(rotMemory)
         local pitch = readFloat(rotMemory+4)
         local roll = readFloat(rotMemory+8)

         if yaw == prevYaw and pitch == prevPitch and roll == prevRoll then
            return
         end

         calcQuaternion(rotMemory, yaw, pitch, roll)

         prevYaw = yaw
         prevPitch = pitch
         prevRoll = roll
end

function init()
         --print("init")
         if timer == nil then
            print("Creating timer")
            timer = createTimer(nil, false)
            timer.setInterval(10)
            timer.OnTimer = timer_tick
         else
             timer.OnTimer = timer_tick
             timer.setEnabled(true)
         end
end

function deinit()
         --print("deinit")
         timer.setEnabled(false)
end



{$asm}
[ENABLE]
globalalloc(rotMemory, 0x100, "LRFF13.exe"+6CF40A)
{$lua}
init()

{$asm}
[DISABLE]
{$lua}
deinit()
{$asm}
dealloc(rotMemory)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>36</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>35</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>7229</ID>
          <Description>"Pitch  --  Up / Down arrow"</Description>
          <VariableType>Float</VariableType>
          <Address>rotMemory+4</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>38</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>40</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>7230</ID>
          <Description>"Yaw  --  Left / Right arrow"</Description>
          <VariableType>Float</VariableType>
          <Address>rotMemory</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
              </Keys>
              <Value>0</Value>
              <ID>6</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>37</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>39</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>7231</ID>
          <Description>"Roll  --  Doesn't really work, but Numpad 1 / 3"</Description>
          <VariableType>Float</VariableType>
          <Address>rotMemory+8</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
              </Keys>
              <Value>0</Value>
              <ID>7</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>99</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>119</ID>
          <Description>"X  --  Numpad 4 / 6"</Description>
          <VariableType>Float</VariableType>
          <Address>rotMemory+34</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>100</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>102</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>121</ID>
          <Description>"Y  --  Numpad 7 / 9"</Description>
          <VariableType>Float</VariableType>
          <Address>rotMemory+38</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
              </Keys>
              <Value>0</Value>
              <ID>8</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>103</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>105</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>120</ID>
          <Description>"Z  --  Numpad 5 / 8"</Description>
          <VariableType>Float</VariableType>
          <Address>rotMemory+3C</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
              </Keys>
              <Value>0</Value>
              <ID>8</ID>
            </Hotkey>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>104</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>101</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>7235</ID>
          <Description>"r11"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+10</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7236</ID>
          <Description>"r12"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+14</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7237</ID>
          <Description>"r13"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+18</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7238</ID>
          <Description>"r21"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+1C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7239</ID>
          <Description>"r22"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+20</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7240</ID>
          <Description>"r23"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+24</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7241</ID>
          <Description>"r31"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+28</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7242</ID>
          <Description>"r32"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+2C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7243</ID>
          <Description>"r33"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>rotMemory+30</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7249</ID>
          <Description>"Initialized Var"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>rotMemory+4C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7261</ID>
      <Description>"No description"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>rotMemory+50</Address>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm1,[ecx+6C]</Description>
      <AddressString>LRFF13.exe+67A096</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>EC</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>49</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>51</Byte>
        <Byte>70</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm2,[ecx+70]</Description>
      <AddressString>LRFF13.exe+67A09B</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>49</Byte>
        <Byte>6C</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>51</Byte>
        <Byte>70</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>C1</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm2,[ecx+78]</Description>
      <AddressString>LRFF13.exe+67A0AA</AddressString>
      <Before>
        <Byte>D2</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>51</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>DB</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call LRFF13.exe+67A090</Description>
      <AddressString>LRFF13.exe+64F2BE</AddressString>
      <Before>
        <Byte>52</Byte>
        <Byte>8D</Byte>
        <Byte>45</Byte>
        <Byte>DC</Byte>
        <Byte>50</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>CD</Byte>
        <Byte>AD</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>7E</Byte>
        <Byte>45</Byte>
        <Byte>EC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm1,[ecx+7C]</Description>
      <AddressString>LRFF13.exe+67A0CF</AddressString>
      <Before>
        <Byte>D2</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>49</Byte>
        <Byte>7C</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>E4</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm2,[ecx+74]</Description>
      <AddressString>LRFF13.exe+67A0C3</AddressString>
      <Before>
        <Byte>C3</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>51</Byte>
        <Byte>74</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>D2</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss xmm1,[LRFF13.exe+9F4008]</Description>
      <AddressString>LRFF13.exe+67A0FB</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E1</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>0D</Byte>
        <Byte>08</Byte>
        <Byte>40</Byte>
        <Byte>B8</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>DD</Byte>
        <Byte>66</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jb LRFF13.exe+646FD0</Description>
      <AddressString>LRFF13.exe+6472C7</AddressString>
      <Before>
        <Byte>89</Byte>
        <Byte>55</Byte>
        <Byte>D0</Byte>
        <Byte>3B</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>82</Byte>
        <Byte>03</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne LRFF13.exe+646EC3</Description>
      <AddressString>LRFF13.exe+646EBC</AddressString>
      <Before>
        <Byte>56</Byte>
        <Byte>18</Byte>
        <Byte>83</Byte>
        <Byte>FA</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>BA</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movq xmm0,[edi+08]</Description>
      <AddressString>LRFF13.exe+579697</AddressString>
      <Before>
        <Byte>07</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>D6</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>7E</Byte>
        <Byte>47</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>D6</Byte>
        <Byte>40</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movq [ecx+7C],xmm0</Description>
      <AddressString>LRFF13.exe+6CE6CE</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>7E</Byte>
        <Byte>40</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>D6</Byte>
        <Byte>41</Byte>
        <Byte>7C</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>7E</Byte>
        <Byte>40</Byte>
        <Byte>18</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movq [ecx+6C],xmm0</Description>
      <AddressString>LRFF13.exe+6CE6BA</AddressString>
      <Before>
        <Byte>08</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>7E</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>D6</Byte>
        <Byte>41</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>7E</Byte>
        <Byte>40</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [ecx+5C],xmm5</Description>
      <AddressString>003700A2</AddressString>
      <Before>
        <Byte>2D</Byte>
        <Byte>34</Byte>
        <Byte>00</Byte>
        <Byte>38</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>69</Byte>
        <Byte>5C</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>2D</Byte>
        <Byte>38</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [ecx+60],xmm5</Description>
      <AddressString>003700AF</AddressString>
      <Before>
        <Byte>2D</Byte>
        <Byte>38</Byte>
        <Byte>00</Byte>
        <Byte>38</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>69</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>2D</Byte>
        <Byte>3C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of movss [ecx+64],xmm5</Description>
      <AddressString>003700BC</AddressString>
      <Before>
        <Byte>2D</Byte>
        <Byte>3C</Byte>
        <Byte>00</Byte>
        <Byte>38</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>69</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>7B</Byte>
        <Byte>F3</Byte>
        <Byte>DF</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="80000008">
      <Description>Change of mulsd xmm0,[LRFF13.exe+9F18E0]</Description>
      <AddressString>LRFF13.exe+6B95F8</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>E8</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>59</Byte>
        <Byte>05</Byte>
        <Byte>E0</Byte>
        <Byte>18</Byte>
        <Byte>1E</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>2C</Byte>
        <Byte>C0</Byte>
        <Byte>3B</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>rotMemory</Name>
      <Address>007E0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
