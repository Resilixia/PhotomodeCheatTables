<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <Files>
    <timestop.CEA Encoding="Ascii85">rB(N+n=MlFV]a)zFpB!%$WF4^7hWP?A$1kuD$Sb{RbV!=BQ7rB##Pl^;9:-wiSKL6Qdb{==97:nmji!4TwIKU$n[qA:WZu1lX=.td6[OU,WSUm7B@3]oDQN^QK}m_Ne7[?C/H_T(49bR(9!,=cHRg0*T538d!UdjxV=pXS{w8[5)/lA[G3Z2or-;,*eWucUwKkyTZFE/9mY1x%1N*FZ#m5e9}Feq.Brm$vTqYp#g=$l.*G[sNttrT[MxK9qAJ8]i^S7rH)=uKbn@0NUBh=^+jE?D[Vwq%GS5wJ!z]rdy[c,vn:5pKxYcVuhc+{wut}vL9k$^5Q(G-A/5[cS!Dmc^U+CIkd(_keOI7ADr4?x^mSxaPDbON=?/nWg$s0f5Rjg=WO$q6(j,2bG22(b02Q//Iw*?I1#pI1ah=7[pr{}i6=LLTt^@o39@f/g9M)zXnBND)h45QD1_1:y$?MScNo+X!A7I*r%Yif:d69ar3[SZE*L,b^r$#TGMiMQ#1r2^fRvY7WPg-r+A1CfAWhYzl%frUV@Sy@@LCaeNmFrG/N7fE1/@FHv1K.VO7v@8GA?Ok2i=9Y@mo*5t,^eQ{0S#4SDbIXEN35dPUN0EVud{5Xlqae$]clgMu82sRfdpxg!sZDv8,yO%9Kp2970AU$_:+y3^vPxmzR4]@[]Up#=U^y32i]JggU^h0(81n1(TFrNK51*d@VCzH?kCp$3.8v-h^PyeyCZj0WiheqB:/Ix_4RTK8u#IdT.?Os^9MZw@z$UyMrz*qpgvg^{];n!4u;A92f/OY{D$e=s0u}0)0$bl#ShA{yO.ub}rZ5,.:F])b*geS2sl9gR)[_xF(-,NMP:?89m0F2,T(.^5yCvS5P@+g0RVy)hAcn(WV]!lH$J9zwuGVDP+L,zLtROrC@#}1-1czX@#M;1}C{$[)]]yl.Zs#8</timestop.CEA>
    <fov.CEA Encoding="Ascii85">tyW!c.zktRXC)f@)W)zbagy-_[}Q+5JEdAdm9F+$p}{WXVP$)+,Yq9ve_);I#siKM;{@ujLI{@9d,xbs=j7.H[u/3BpN-v5^/7Z-SyZgTEM?UNp?Tnz]4=rj(6svek5nN6Gz+rF5dl#[NcG^1[7)2#P.A(fi4jrkv,cJ%/!nj9R*dT[rZiQ4Q3*Z,$C}crwX09YfpyjI/?B#?QPRA4N,XsGHfwg@t4SEqWRTNxpJ*8[OgFz5xMEZ{$6[fgDR;5!KVe]XdMasgg+D4jZYVYg+cTkaL/oA7NK#cq4/]f=Lc#Dz!L2_{+EFZuiej6:@P55r_DTY/e-hH}Npqck4?lVo3sKNg$*n=GCEOJ[rYTVteC=WuM.)!,2t7rJ@@s4O%3z)au*I:lP18D_MHQ=XO1/kPFqD8}/iI_uBP#fLx7:qM%L+[A?HO2+o}{=Mg!3{uZy?4T9+tb6h3O+,9bQA*t*U7=G@{(xmez;3jP0Na)=v4p!hI1^HP}V?^o@zUcXulmQ;:5AV#94mxlNMl9BCGVt+f8amPY{IrY}rWk_Ev{VU$q0VMD^RAuEp1HbhnK;g0r#mB29O,Mj#9xx,MG;@MB^+k_nx-ijPLkgkZ6OEGOub)QvSVHf5P*BEXc^0ZKC.@PL;+;Ar0c^-or[xW]8+{;*Li^RI+p6kFOa9xZ(5bb:,5S+SHV8stt3;S7}j[1DC#?/p9X1:DJXb#LF*FIj+PWd(XsH3VN-*/o=YHj4b,DL}sS88,LqfIz;K^RnhZw+a(q:V=l@7CyVzAia?QgLX3:uf,0f1@H?Zi_a6MYFwS3!TYp)+$F8ZP6P[@KAzPpBWdP,rcAlvV3*v7vDv@:fJl[S:=z]M-W]ZuXs}8lo.laXe_Z;ssnE%-05siq2y:H$tUHee$GQOyT]BogWo[{a$8R8/=%9i:Y9V(=[?sn8[9p3IFN}LSf+)I[M%1NMILWuPGXT_dy}0jRM,9c^Fge@W+sJ3w$M##bph-+s/Wj!@@#6C8ZKM!aoK89r?9UA#(1,N=)_O68s6FO?y;2jr]3Zs@q=8gN(8=$M@07juJu,Dzi_NW8%uOM4=rJEO+%XS8fhE$Fpk0HC?mA{;b#[3+M%d*cl[S}SJLnO*9=KN</fov.CEA>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"quaternion"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
local halfDegToRad = 0.5 * math.pi / 180
prevYaw = 0
prevPitch = 0
prevRoll = 0

function calcQuaternion(rotMemory, yaw, pitch, roll)
    --print("calcQuaternion")
	pitch = pitch * halfDegToRad
    yaw = yaw * halfDegToRad
    roll = roll * halfDegToRad

    local sinX = math.sin(pitch)
    local cosX = math.cos(pitch)
    local sinY = math.sin(yaw)
    local cosY = math.cos(yaw)
    local sinZ = math.sin(roll)
    local cosZ = math.cos(roll)

    local w = cosY * cosX * cosZ + sinY * sinX * sinZ
    local x = cosY * sinX * cosZ + sinY * cosX * sinZ
    local y = sinY * cosX * cosZ - cosY * sinX * sinZ
    local z = cosY * cosX * sinZ - sinY * sinX * cosZ

    writeFloat(rotMemory + 16, x)
    writeFloat(rotMemory + 20, y)
    writeFloat(rotMemory + 24, z)
    writeFloat(rotMemory + 28, w)
end


function timer_tick(timer)
         --print("timer_tick")
         local rotMemory = getAddressSafe("rotMemory")
         if rotMemory == nil then
            return
         end

         local yaw = readFloat(rotMemory)
         local pitch = readFloat(rotMemory+4)
         local roll = readFloat(rotMemory+8)

         if yaw == prevYaw and pitch == prevPitch and roll == prevRoll then
            return
         end

         calcQuaternion(rotMemory, yaw, pitch, roll)

         prevYaw = yaw
         prevPitch = pitch
         prevRoll = roll
end

function init()
         --print("init")
         if timer == nil then
            print("Creating timer")
            timer = createTimer(nil, false)
            timer.setInterval(10)
            timer.OnTimer = timer_tick
         else
             timer.setEnabled(true)
         end
end

function deinit()
         --print("deinit")
         timer.setEnabled(false)
end


{$asm}
[ENABLE]
globalalloc(rotMemory, 0x50)
{$lua}
init()

{$asm}
[DISABLE]
{$lua}
deinit()
{$asm}
dealloc(rotMemory)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"camera"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Ghostinthecamera
[ENABLE]
globalalloc(rotMemory, 0x100)
aobscanmodule(_CameraStruct,Nino2.exe,0F 11 07 4C 8D 9C 24 B8 00 00 00) // should be unique
registersymbol(_CameraStruct)
alloc(newmem,$1000,"Nino2.exe"+39DF0A)
registersymbol(camerabase)
label(code1)
label(wrongcam)
label(return1)
label(code2)
label(wrongcam2)
label(return2)
label(code3)
label(wrongcam3)
label(return3)

rotMemory+4C:
db 00 00 00 00

newmem:

code1:
  cmp r15,1
  jne wrongcam
  mov [camerabase],rdi
  mov [rotMemory+50],rdi
  push rcx
  mov cl, [rotMemory+4C]
  test cl,cl
  je skip

  mov ecx,[rotMemory+10]
  mov [rdi],ecx
  mov ecx,[rotMemory+14]
  mov [rdi+4],ecx
  mov ecx,[rotMemory+18]
  mov [rdi+8],ecx

  mov ecx,[rotMemory+1C]
  mov [rdi+10],ecx
  mov ecx,[rotMemory+20]
  mov [rdi+14],ecx
  mov ecx,[rotMemory+24]
  mov [rdi+18],ecx

  mov ecx,[rotMemory+28]
  mov [rdi+20],ecx
  mov ecx,[rotMemory+2C]
  mov [rdi+24],ecx
  mov ecx,[rotMemory+30]
  mov [rdi+28],ecx

  mov ecx,[rotMemory+34]
  mov [rdi+C],ecx
  mov ecx,[rotMemory+38]
  mov [rdi+1C],ecx
  mov ecx,[rotMemory+3C]
  mov [rdi+2C],ecx

skip:
  pop rcx

  //movups [rdi],xmm0
  lea r11,[rsp+000000B8]
  movups xmm1,[rax+10]
  //movups [rdi+10],xmm1
  movups xmm0,[rax+20]
 //movups [rdi+20],xmm0
  jmp return1
wrongcam:
  movups [rdi],xmm0
  lea r11,[rsp+000000B8]
  movups xmm1,[rax+10]
  movups [rdi+10],xmm1
  movups xmm0,[rax+20]
  movups [rdi+20],xmm0
  jmp return1

code2:
  cmp r15,1
  jne wrongcam2
  jmp return2
wrongcam2:
  movss [rdi+04],xmm11
  movss [rdi],xmm7
  movss [rdi+08],xmm10
  movss [rdi+10],xmm8
  movss [rdi+14],xmm9
  movss [rdi+18],xmm6
  movss [rdi+20],xmm12
  movss [rdi+24],xmm14
  movss [rdi+28],xmm13
  jmp return2

code3:
 cmp r15,1
 jne wrongcam3
 //movss [rdi+0C],xmm11
 movaps xmm11,[r11-68]
 xorps xmm9,xmm0
 //movss [rdi+1C],xmm9
 movaps xmm9,[r11-48]
 xorps xmm14,xmm0
 //movss [rdi+2C],xmm14
 jmp return3
wrongcam3:
  movss [rdi+0C],xmm11
  movaps xmm11,[r11-68]
  xorps xmm9,xmm0
  movss [rdi+1C],xmm9
  movaps xmm9,[r11-48]
  xorps xmm14,xmm0
  movss [rdi+2C],xmm14
  jmp return3


camerabase:
dq 0

_CameraStruct:
  jmp code1
  db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
return1:

_CameraStruct+2E:
  jmp code2
  db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
return2:

_CameraStruct+DB:
  jmp code3
  db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
return3:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
_CameraStruct:
db 0F 11 07 4C 8D 9C 24 B8 00 00 00 0F 10 48 10 0F 11 4F 10 0F 10 40 20 0F 11 47 20

_CameraStruct+2E:
db F3 44 0F 11 5F 04 F3 0F 11 3F F3 44 0F 11 57 08 F3 44 0F 11 47 10 F3 44 0F 11 4F 14 F3 0F 11 77 18 F3 44 0F 11 67 20 F3 44 0F 11 77 24 F3 44 0F 11 6F 28

_CameraStruct+DB:
db F3 44 0F 11 5F 0C 45 0F 28 5B 98 44 0F 57 C8 F3 44 0F 11 4F 1C 45 0F 28 4B B8 44 0F 57 F0 F3 44 0F 11 77 2C

unregistersymbol(camerabase)
unregistersymbol(_CameraStruct)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Nino2.exe"+39DF0A

"Nino2.exe"+39DEDE: F3 44 0F 59 CF           -  mulss xmm9,xmm7
"Nino2.exe"+39DEE3: F3 44 0F 5C C0           -  subss xmm8,xmm0
"Nino2.exe"+39DEE8: 41 0F 28 C2              -  movaps xmm0,xmm10
"Nino2.exe"+39DEEC: F3 41 0F 59 C4           -  mulss xmm0,xmm12
"Nino2.exe"+39DEF1: F3 44 0F 5C C8           -  subss xmm9,xmm0
"Nino2.exe"+39DEF6: 41 0F 28 C6              -  movaps xmm0,xmm14
"Nino2.exe"+39DEFA: F3 0F 59 C7              -  mulss xmm0,xmm7
"Nino2.exe"+39DEFE: F3 0F 5C F0              -  subss xmm6,xmm0
"Nino2.exe"+39DF02: E8 99 C7 E3 FF           -  call Nino2.exe+1DA6A0
"Nino2.exe"+39DF07: 0F 10 00                 -  movups xmm0,[rax]
// ---------- INJECTING HERE ----------
"Nino2.exe"+39DF0A: 0F 11 07                 -  movups [rdi],xmm0
"Nino2.exe"+39DF0D: 4C 8D 9C 24 B8 00 00 00  -  lea r11,[rsp+000000B8]
// ---------- DONE INJECTING  ----------
"Nino2.exe"+39DF15: 0F 10 48 10              -  movups xmm1,[rax+10]
"Nino2.exe"+39DF19: 0F 11 4F 10              -  movups [rdi+10],xmm1
"Nino2.exe"+39DF1D: 0F 10 40 20              -  movups xmm0,[rax+20]
"Nino2.exe"+39DF21: 0F 11 47 20              -  movups [rdi+20],xmm0
"Nino2.exe"+39DF25: 0F 10 48 30              -  movups xmm1,[rax+30]
"Nino2.exe"+39DF29: 48 8B C7                 -  mov rax,rdi
"Nino2.exe"+39DF2C: F3 0F 10 05 EC C6 A4 00  -  movss xmm0,[Nino2.exe+DEA620]
"Nino2.exe"+39DF34: 0F 11 4F 30              -  movups [rdi+30],xmm1
"Nino2.exe"+39DF38: F3 44 0F 11 5F 04        -  movss [rdi+04],xmm11
"Nino2.exe"+39DF3E: F3 0F 11 3F              -  movss [rdi],xmm7
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"r11"</Description>
          <VariableType>Float</VariableType>
          <Address>camerabase</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>rotMemory</Name>
      <Address>2A296EC0050</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
